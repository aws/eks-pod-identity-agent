// Copyright 2023-2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//	http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Source: netlink.go in package iproute
// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//	mockgen -source /home/chunywan/workplace/eks-pod-identity-agent/pkg/initalizer/iproute/netlink.go -package iproute
//
// Package iproute is a generated GoMock package.
package iproute

import (
	reflect "reflect"

	netlink "github.com/vishvananda/netlink"
	gomock "go.uber.org/mock/gomock"
)

// MockNetlinkHandle is a mock of NetlinkHandle interface.
type MockNetlinkHandle struct {
	ctrl     *gomock.Controller
	recorder *MockNetlinkHandleMockRecorder
}

// MockNetlinkHandleMockRecorder is the mock recorder for MockNetlinkHandle.
type MockNetlinkHandleMockRecorder struct {
	mock *MockNetlinkHandle
}

// NewMockNetlinkHandle creates a new mock instance.
func NewMockNetlinkHandle(ctrl *gomock.Controller) *MockNetlinkHandle {
	mock := &MockNetlinkHandle{ctrl: ctrl}
	mock.recorder = &MockNetlinkHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetlinkHandle) EXPECT() *MockNetlinkHandleMockRecorder {
	return m.recorder
}

// AddrAdd mocks base method.
func (m *MockNetlinkHandle) AddrAdd(link netlink.Link, addr *netlink.Addr) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrAdd", link, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddrAdd indicates an expected call of AddrAdd.
func (mr *MockNetlinkHandleMockRecorder) AddrAdd(link, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrAdd", reflect.TypeOf((*MockNetlinkHandle)(nil).AddrAdd), link, addr)
}

// AddrList mocks base method.
func (m *MockNetlinkHandle) AddrList(link netlink.Link, family int) ([]netlink.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddrList", link, family)
	ret0, _ := ret[0].([]netlink.Addr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddrList indicates an expected call of AddrList.
func (mr *MockNetlinkHandleMockRecorder) AddrList(link, family any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddrList", reflect.TypeOf((*MockNetlinkHandle)(nil).AddrList), link, family)
}

// LinkAdd mocks base method.
func (m *MockNetlinkHandle) LinkAdd(link netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkAdd", link)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkAdd indicates an expected call of LinkAdd.
func (mr *MockNetlinkHandleMockRecorder) LinkAdd(link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkAdd", reflect.TypeOf((*MockNetlinkHandle)(nil).LinkAdd), link)
}

// LinkByName mocks base method.
func (m *MockNetlinkHandle) LinkByName(name string) (netlink.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkByName", name)
	ret0, _ := ret[0].(netlink.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LinkByName indicates an expected call of LinkByName.
func (mr *MockNetlinkHandleMockRecorder) LinkByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkByName", reflect.TypeOf((*MockNetlinkHandle)(nil).LinkByName), name)
}

// LinkSetUp mocks base method.
func (m *MockNetlinkHandle) LinkSetUp(link netlink.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkSetUp", link)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkSetUp indicates an expected call of LinkSetUp.
func (mr *MockNetlinkHandleMockRecorder) LinkSetUp(link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkSetUp", reflect.TypeOf((*MockNetlinkHandle)(nil).LinkSetUp), link)
}

// RouteAdd mocks base method.
func (m *MockNetlinkHandle) RouteAdd(route *netlink.Route) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteAdd", route)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteAdd indicates an expected call of RouteAdd.
func (mr *MockNetlinkHandleMockRecorder) RouteAdd(route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteAdd", reflect.TypeOf((*MockNetlinkHandle)(nil).RouteAdd), route)
}

// RouteList mocks base method.
func (m *MockNetlinkHandle) RouteList(link netlink.Link, family int) ([]netlink.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteList", link, family)
	ret0, _ := ret[0].([]netlink.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteList indicates an expected call of RouteList.
func (mr *MockNetlinkHandleMockRecorder) RouteList(link, family any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteList", reflect.TypeOf((*MockNetlinkHandle)(nil).RouteList), link, family)
}
