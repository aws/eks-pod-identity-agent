package sharedcredsrotater

import (
	"context"
	"crypto/rand"
	"fmt"
	"os"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/config"
	"github.com/stretchr/testify/assert"
)

func TestRotatingCredentialsProvider_FailCredsFileDoesNotExist(t *testing.T) {
	b := make([]byte, 10)
	rand.Read(b)
	t.Setenv("AWS_SHARED_CREDENTIALS_FILE", fmt.Sprintf("/tmp/does-not-exist-%x", string(b)))
	ctx := context.Background()
	rcp := NewRotatingSharedCredentialsProvider()
	cfg, err := config.LoadDefaultConfig(
		ctx,
		config.WithCredentialsProvider(aws.NewCredentialsCache(rcp)),
	)
	assert.NoError(t, err)
	v, err := cfg.Credentials.Retrieve(ctx)
	assert.Error(t, err)
	assert.Equal(t, aws.Credentials{}, v)
}

func TestRotatingCredentialsProvider_RetrieveAndRefresh(t *testing.T) {
	// create tmp credentials file and use that for this test
	tmpFile, err := os.CreateTemp(os.TempDir(), "credentials")
	assert.NoError(t, err)
	defer os.Remove(tmpFile.Name())
	text := []byte(`[default]
aws_access_key_id = ACCESSKEYID1
aws_secret_access_key = ACCESSSECRET1
aws_session_token = SESSIONTOKEN1
`)
	_, err = tmpFile.Write(text)
	assert.NoError(t, err)

	t.Setenv("AWS_SHARED_CREDENTIALS_FILE", tmpFile.Name())
	ctx := context.Background()
	rcp := NewRotatingSharedCredentialsProvider()
	rcp.rotationInterval = time.Millisecond

	cfg, err := config.LoadDefaultConfig(
		ctx,
		config.WithCredentialsProvider(aws.NewCredentialsCache(rcp)),
	)

	assert.NoError(t, err)

	v, err := cfg.Credentials.Retrieve(ctx)
	assert.NoError(t, err)
	assert.Equal(t, fmt.Sprintf("%s: [%s]", rotatingSharedCredentialsProviderName, tmpFile.Name()), v.Source)
	assert.Equal(t, "ACCESSKEYID1", v.AccessKeyID)
	assert.Equal(t, "ACCESSSECRET1", v.SecretAccessKey)
	assert.Equal(t, "SESSIONTOKEN1", v.SessionToken)
	assert.False(t, v.Expired(), "Credentials should not be expired yet")

	// overwrite the credentials file and expect to receive the new creds
	text2 := []byte(`[default]
aws_access_key_id = ACCESSKEYID2
aws_secret_access_key = ACCESSSECRET2
aws_session_token = SESSIONTOKEN2
`)

	_, err = tmpFile.WriteAt(text2, 0)
	assert.NoError(t, err)

	// this should still retrieve the old creds from cache since they haven't expired yet
	v, err = cfg.Credentials.Retrieve(ctx)
	assert.NoError(t, err)
	assert.Equal(t, fmt.Sprintf("%s: [%s]", rotatingSharedCredentialsProviderName, tmpFile.Name()), v.Source)
	assert.Equal(t, "ACCESSKEYID1", v.AccessKeyID, "should still be the old creds")
	assert.Equal(t, "ACCESSSECRET1", v.SecretAccessKey, "should still be the old creds")
	assert.Equal(t, "SESSIONTOKEN1", v.SessionToken, "should still be the old creds")
	assert.False(t, v.Expired(), "Credentials should not be expired yet")

	time.Sleep(time.Millisecond)
	assert.True(t, v.Expired(), "Credentials should be expired by now")

	// this should retrieve the new creds since the old one in cache has expired
	v, err = cfg.Credentials.Retrieve(ctx)
	assert.NoError(t, err)
	assert.Equal(t, fmt.Sprintf("%s: [%s]", rotatingSharedCredentialsProviderName, tmpFile.Name()), v.Source)
	assert.Equal(t, "ACCESSKEYID2", v.AccessKeyID)
	assert.Equal(t, "ACCESSSECRET2", v.SecretAccessKey)
	assert.Equal(t, "SESSIONTOKEN2", v.SessionToken)
}
