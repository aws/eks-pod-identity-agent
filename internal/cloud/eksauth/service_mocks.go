// Copyright 2023-2023 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//	http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Source: service.go in package eksauth
// Code generated by MockGen. DO NOT EDIT.
//
// Generated by this command:
//
//	mockgen -source /home/vgonzla/kubernetes/eks-irsa-agent/internal/cloud/eksauth/service.go -package eksauth
//
// Package eksauth is a generated GoMock package.
package eksauth

import (
	context "context"
	reflect "reflect"

	credentials "go.amzn.com/eks/eks-pod-identity-agent/pkg/credentials"
	gomock "go.uber.org/mock/gomock"
)

// MockIface is a mock of Iface interface.
type MockIface struct {
	ctrl     *gomock.Controller
	recorder *MockIfaceMockRecorder
}

// MockIfaceMockRecorder is the mock recorder for MockIface.
type MockIfaceMockRecorder struct {
	mock *MockIface
}

// NewMockIface creates a new mock instance.
func NewMockIface(ctrl *gomock.Controller) *MockIface {
	mock := &MockIface{ctrl: ctrl}
	mock.recorder = &MockIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIface) EXPECT() *MockIfaceMockRecorder {
	return m.recorder
}

// GetIamCredentials mocks base method.
func (m *MockIface) GetIamCredentials(ctx context.Context, request *credentials.EksCredentialsRequest) (*credentials.EksCredentialsResponse, credentials.ResponseMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIamCredentials", ctx, request)
	ret0, _ := ret[0].(*credentials.EksCredentialsResponse)
	ret1, _ := ret[1].(credentials.ResponseMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIamCredentials indicates an expected call of GetIamCredentials.
func (mr *MockIfaceMockRecorder) GetIamCredentials(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIamCredentials", reflect.TypeOf((*MockIface)(nil).GetIamCredentials), ctx, request)
}
